.PHONY: dev lint complex coverage pre-commit sort deploy destroy deps unit infra-tests integration e2e coverage-tests docs lint-docs build format

dev:
	# Upgrade pip and install pre-commit and poetry for code quality and dependency management
	pip install --upgrade pip pre-commit poetry

	# Install pre-commit hooks to automate code quality checks before each commit
	pre-commit install

	# Configure Poetry to create a local virtual environment within the project directory
	poetry config --local virtualenvs.in-project true

	# Install project dependencies defined in poetry.lock without installing the project package itself
	poetry install --no-root

	# Install Node.js dependencies as specified in package-lock.json for consistent setup
	npm ci

format:
	poetry run ruff check .

format-fix:
	poetry run ruff format .

lint: format
	@echo "Running mypy"
	$(MAKE) mypy-lint

complex:
	@echo "Running Radon"
	poetry run radon cc -e 'tests\*,cdk.out\*,node_modules\*' .
	@echo "Running xenon"
	poetry run xenon --max-absolute B --max-modules A --max-average A -e 'tests\*,.venv\*,cdk.out\*,node_modules\*' .

pre-commit:
	poetry run pre-commit run -a --show-diff-on-failure

deps:
	poetry export --only=dev --format=requirements.txt > dev_requirements.txt
	poetry export --without=dev --format=requirements.txt > lambda_requirements.txt

build: deps
	if not exist ".build\lambdas\product" mkdir ".build\lambdas\product"
	rmdir /S /Q .build\lambdas\product
	echo D | xcopy /f /y product. .build\lambdas\product /s
	if not exist ".build\common_layer" mkdir ".build\common_layer"
	poetry export --without=dev --format=requirements.txt > .build\common_layer\requirements.txt

mypy-lint:
	poetry run mypy --pretty product. docs\examples infrastructure tests

unit:
	poetry run pytest tests\unit  --cov-config=.coveragerc --cov=product --cov-report xml

integration:
	poetry run pytest tests\integration  --cov-config=.coveragerc --cov=product --cov-report xml

e2e:
	poetry run pytest tests\e2e  --cov-config=.coveragerc --cov=product --cov-report xml

pr: deps pre-commit complex lint lint-docs unit integration e2e

pipeline-tests:
	poetry run pytest tests\unit tests\integration  --cov-config=.coveragerc --cov=product --cov-report xml

deploy: build
	npx cdk deploy --app=".venv\Scripts\python.exe app.py" --require-approval=never

destroy:
	npx cdk destroy --app=".venv\Scripts\python.exe app.py" --force

docs:
	poetry run mkdocs serve

lint-docs:
	docker run -v \markdown 06kellyjac\markdownlint-cli --fix "docs"

watch:
	npx cdk watch

update-deps:
	poetry update
	pre-commit autoupdate
	npm i --package-lock-only
